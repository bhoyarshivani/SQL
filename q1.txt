public class CreateList {  
    //Represents the node of list.  
    public class Node{  
        int data;  
        Node next;  
        public Node(int data) {  
            this.data = data;  
        }  
    }  
      
    //Declaring head and tail pointer as null.  
    public Node oddhead = null;  
    public Node oddtail = null;
    public Node evenhead = null;  
    public Node eventail = null;
      
    //This function will add the new node at the end of the list.  
    public void insertAtRight(int data){  
        if(data%2==0)
        {
            //Create new node  
            Node evenNode = new Node(data);  
            //Checks if the list is empty.  
            if(evenhead == null) 
            {  
                //If list is empty, both head and tail would point to new node.  
                evenhead = evenNode;  
                eventail = evenNode;  
                evenNode.next = evenhead;  
            }  
            else 
            {  
                //tail will point to new node.  
                eventail.next = evenNode;  
                //New node will become new tail.  
                eventail = evenNode;  
                //Since, it is circular linked list tail will point to head.  
                eventail.next = evenhead;  
            }
        }
        else
        {
            //Create new node  
            Node oddNode = new Node(data);  
            //Checks if the list is empty.  
            if(oddhead == null) 
            {  
                //If list is empty, both head and tail would point to new node.  
                oddhead = oddNode;  
                oddtail = oddNode;  
                oddNode.next = oddhead;  
            }  
            else 
            {  
                //tail will point to new node.  
                oddtail.next = oddNode;  
                //New node will become new tail.  
                oddtail = oddNode;  
                //Since, it is circular linked list tail will point to head.  
                oddtail.next = oddhead;  
            }
        }
          
    }  
      
    //Displays all the nodes in the list  
    public void printAllNodes() {
        System.out.println("Nodes of Odd circular Linked list: ");
        Node oddcurrent = oddhead;  
        if(oddhead == null) {  
            System.out.println("List is empty");  
        }  
        else {  
            System.out.println();
             do{  
                //Prints each node by incrementing pointer.  
                System.out.print(" "+ oddcurrent.data);  
                oddcurrent = oddcurrent.next;  
            }while(oddcurrent != oddhead);  
            System.out.println();  
        }  
        System.out.println();
        
        System.out.println("Nodes of Even circular Linked list: ");
        Node evencurrent = evenhead;  
        if(evenhead == null) {  
            System.out.println("List is empty");  
        }  
        else {  
            System.out.println();
             do{  
                //Prints each node by incrementing pointer.  
                System.out.print(" "+ evencurrent.data);  
                evencurrent = evencurrent.next;  
            }while(evencurrent != evenhead);  
            System.out.println();  
        } 
        System.out.println();
    }  
    
    public void mergeList()
    {
        oddtail.next = evenhead;
        eventail.next = oddhead;
        
        Node current = oddhead;  
        if(oddhead == null) {  
            System.out.println("List is empty");  
        }  
        else {  
            System.out.println();
                 System.out.println("Nodes of circular Linked list");
             do{  
                 
                //Prints each node by incrementing pointer.  
                System.out.print(" "+ current.data);  
                current = current.next;  
            }while(current != oddhead);  
            System.out.println();  
        }  
        System.out.println();
    }
      
    public static void main(String[] args) {  
        CreateList cl = new CreateList();  
        //Adds data to the list  
        cl.insertAtRight(1);  
        cl.insertAtRight(2);  
        cl.insertAtRight(3);  
        cl.insertAtRight(4);  
        //Displays all the nodes present in the list  
        cl.printAllNodes();
        cl.mergeList();
    }  
} 